val pluginsDir: File by rootProject.extra

plugins {
    kotlin("jvm") apply false
}

buildscript {
    dependencies {
        classpath("org.pf4j:pf4j:3.9.0")
    }
}

// here we define the tasks which will build the plugins in the subprojects
subprojects {
    // if the variable definitions are put here they are resolved for each subproject
    val pluginId: String by project
    val pluginClass: String by project
    val pluginProvider: String by project
    val pluginDependencies: String by project

    val project = this
    // we have to apply the gradle jvm plugin, because it provides the jar and build tasks
    apply(plugin = "org.jetbrains.kotlin.jvm")

    // the plugin task will put the files into a zip file
    tasks.register<Jar>("plugin") {
        archiveBaseName.set("plugin-$pluginId")

        // first taking the classes generated by the jar task
        into("classes") {
            with(tasks.named<Jar>("jar").get())
        }

        // and then we also need to include any libraries that are needed by the plugin
        into("lib") {
            from(
                project.configurations["compileClasspath"].filter {
                    // filter out any dependencies that are already part of the parent app
                    !project(":app").configurations["compileClasspath"].contains(it)
                }.filter {
                    // filter out anything from this project, like other required/optional plugins
                    !it.startsWith(rootProject.rootDir)
                },
            )
        }
        archiveExtension.set("zip")
    }

    // the assemblePlugin will copy the zip file into the common plugins directory
    tasks.register<Copy>("assemblePlugin") {
        from(project.tasks.named("plugin"))
        into(pluginsDir)
    }

    // for the jar task we have to set the plugin properties, so they can be written to the manifest
    tasks.withType(Jar::class.java) {
        manifest {
            attributes["Plugin-Class"] = pluginClass
            attributes["Plugin-Id"] = pluginId
            attributes["Plugin-Version"] = archiveVersion
            attributes["Plugin-Provider"] = pluginProvider
            attributes["Plugin-Dependencies"] = pluginDependencies
        }
    }

    tasks.named("build") {
        dependsOn(tasks.named("plugin"))
    }
}

tasks.register("build") {
    dependsOn(subprojects.map { it.tasks.named("assemblePlugin") })
}

tasks.register("assemblePlugins") {
    dependsOn(subprojects.map { it.tasks.named("assemblePlugin") })
}
